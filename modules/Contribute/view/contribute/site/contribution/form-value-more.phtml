<?php
/**
 * @var \Laminas\View\Renderer\PhpRenderer $this
 * @var \Omeka\Api\Representation\SiteRepresentation $site
 * @var \Omeka\Entity\User|null $user
 * @var \Contribute\Form\ContributeForm $form
 * @var \Contribute\Api\Representation\ContributionRepresentation|null $contribution
 * @var \Omeka\Api\Representation\AbstractResourceEntityRepresentation|null $resource
 * @var array $fields
 * @var \Omeka\Api\Representation\ResourceTemplateRepresentation $templateMedia A sub template for media may have no fields.
 * @var array $fieldsByMedia
 * @var array $fieldsMediaBase
 * @var string $action "add" or "edit" or "show"
 * @var string $mode "read" (for template select or for show readonly form before submit) or "write"
 * @var string $space "default" or "guest"
 *
 * @var string $submitLabel
 * @var string $cancelLabel
 * @var bool $isMainForm
 * @var bool $skipContributeCss
 *
 * When called recursively for sub-fields (media):
 * @var ?int $indexMedia
 * @var array $fieldsMedia
 *
 * @var \Laminas\View\Helper\Url $url
 * @var \Laminas\View\Helper\Partial $partial
 * @var \Laminas\View\Helper\EscapeHtml $escape
 * @var \Laminas\I18n\View\Helper\Translate $translate
 * @var \Laminas\View\Helper\EscapeHtmlAttr $escapeAttr
 * @var \Omeka\Api\Manager $apiManager
 * @var ?array $customVocabBaseTypes
 * @var array $valueResourceTypes
 * @var array $valueResourceQueries
 * @var callable $shortResourceTitle
 * @var string $baseUrlFiles
 * @var string $mode
 *
 * @var array $field
 * @var string $term
 * @var int $indexFieldInput
 * @var ?\Omeka\Api\Representation\ResourceTemplatePropertyRepresentation $templateProperty
 * @var \Omeka\Api\Representation\PropertyRepresentation $property
 * @var \Omeka\Api\Representation\ValueRepresentation $value
 */

// TODO Hide button when the number of values is >= max values (currently on load in js); display it when no values and not fillable. So count values before in form or via the current field. And manage required at least one.

$addForMedia = $isMainForm ? '' : ' add-value-media';
?>

<div class="inputs">
    <div class="add-values default-selector" data-next-index="<?= $indexFieldInput ?>" data-next-term="<?= $term ?>"<?php /* if (empty($field['fillable'])): ?> style="display: none;"<?php endif; */?>>
        <?php foreach ($field['datatypes'] as $datatype) switch($datatype):   
                                  
            case 'literal':
            ?>
        <button type="button" class="add-value add-value-literal<?= $addForMedia ?> button o-icon-add"><?= $escape($translate('Add value')) ?></button>
                <?php
                break;

            case 'numeric:integer':
                ?>
        <button type="button" class="add-value add-value-numeric-integer<?= $addForMedia ?> button o-icon-add"><?= $escape($translate('Add number')) ?></button>
                <?php
                break;

            case 'numeric:timestamp':
                ?>
        <button type="button" class="add-value add-value-numeric-timestamp<?= $addForMedia ?> button o-icon-add"><?= $escape($translate('Add date')) ?></button>
                <?php
                break;

            case 'resource':
            case 'resource:item':
            case 'resource:itemset':
            case 'resource:media':
                //libis
                //if (isset($valueResourceQueries[$term])):
                    if(!$field["resource_query"]):
                        $field["resource_query"] = [];
                    endif;    
                    // Get the list of options from the core select element.
                    $resourceName = $valueResourceTypes[$datatype];
                    $element = new \Omeka\Form\Element\ResourceSelect();
                    $element
                        ->setApiManager($apiManager);
                    $element
                        ->setResourceValueOptions($resourceName, $shortResourceTitle, $field["resource_query"]);
                    // The order should be kept, but there is no order in a js array.
                    $valueOptions = [];
                    foreach ($element->getValueOptions() as $k => $v) {
                        $valueOptions[] = ['v' => $k, 't' => $v];
                    }
                    //end
                ?>
                
        <button type="button" class="add-value add-value-resource<?= $addForMedia ?> button o-icon-uri" data-data-type="<?= $datatype ?>" data-placeholder="<?= $translate('Select a resource…')?>" data-value-options="<?= $escapeAttr(json_encode($valueOptions, JSON_UNESCAPED_SLASHES | JSON_UNESCAPED_UNICODE)) ?>"><?= $escape($translate('Add linked resource')) ?></button>
                <?php //endif;
                break;

            case 'uri':
                ?>
        <button type="button" class="add-value add-value-uri<?= $addForMedia ?> button o-icon-uri" data-data-type="uri"><?= $escape($translate('Add URI')) ?></button>
                <?php break;

            case substr($datatype, 0, 12) === 'customvocab:':
                // TODO Simplify with Omeka S v4 (CustomVocab 1.7.0).
                // @see \CustomVocab\DataType\CustomVocab
                $baseType = $customVocabBaseTypes[substr($datatype, 12)] ?? 'literal';
                $customVocab = $apiManager->read('custom_vocabs', ['id' => substr($datatype, 12)])->getContent();
                $valueOptions = [
                    // Managed via js.
                    // ['v' => '', 't' => $translate('Select a value')],
                ];
                if ($baseType === 'resource') {
                    // Manage hierarchical list (via module Thesaurus).
                    $itemSet = $customVocab->itemSet();
                    $itemSetClass = $itemSet ? $itemSet->resourceClass() : null;
                    $plugins = $this->getHelperPluginManager();
                    if ($itemSetClass && in_array($itemSetClass->term(), ['skos:Collection', 'skos:OrderedCollection']) && $plugins->has('thesaurus')) {
                        $result = $plugins->get('thesaurus')($itemSet)->listTree(['indent' => '– ']);
                    } else {
                        $result = $apiManager->search('items', ['item_set_id' => $itemSet->id(), 'sort_by' => 'title'], ['initialize' => false, 'returnScalar' => 'title'])->getContent();
                    }
                    foreach ($result as $id => $title) {
                        $valueOptions[] = ['v' => $id, 't' => $title];
                    }
                } elseif ($baseType === 'uri') {
                    $matches = [];
                    $uris = $customVocab->uris();
                    if (is_array($uris)) {
                        foreach ($uris as $uri => $label) {
                            $valueOptions[] = ['v' => $uri, 't' => strlen($label) && $uri !== $label ? sprintf('%1$s <%2$s>', $label, $uri) : $uri];
                        }
                    } else {
                        $uris = array_map('trim', preg_split("/\r\n|\n|\r/", $customVocab->uris()));
                        foreach ($uris as $uri) {
                            if (preg_match('/^(\S+) (.+)$/', $uri, $matches)) {
                                $valueOptions[] = ['v' => $matches[1], 't' => sprintf('%s <%s>', $matches[2], $matches[1])];
                            } elseif (preg_match('/^(.+)/', $uri, $matches)) {
                                $valueOptions[] = ['v' => $matches[1], 't' => $matches[1]];
                            }
                        }
                    }
                } else {
                    $terms = $customVocab->terms();
                    $terms = is_array($terms) ? $terms : array_map('trim', preg_split("/\r\n|\n|\r/", $terms));
                    foreach ($terms as $term) {
                        $valueOptions[] = ['v' => $term, 't' => $term];
                    }
                }
                ?>
        <button type="button" class="add-value add-value-custom-vocab<?= $addForMedia ?> button o-icon-add" data-data-type="<?= $datatype ?>" data-basetype="<?= $baseType ?>" data-value-options="<?= $escapeAttr(json_encode($valueOptions, JSON_UNESCAPED_SLASHES | JSON_UNESCAPED_UNICODE)) ?>" data-placeholder="<?= $escapeAttr($translate('Select a value…')) ?>"><?= $escape($translate('Add value')) ?></button>
                <?php break;

            case substr($datatype, 0, 12) === 'valuesuggest': // Or valuesuggestall.
                ?>
        <button type="button" class="add-value add-value-value-suggest<?= $addForMedia ?> button o-icon-uri" data-data-type="<?= $datatype ?>"><?= $escape($translate('Add linked data')) ?></button>
                <?php break;

            default:
                // TODO Other types are not managed.
        endswitch; ?>
    </div>
</div>
