<?php
/**
 * @var \Laminas\View\Renderer\PhpRenderer $this
 * @var \Omeka\Api\Representation\SiteRepresentation $site
 * @var \Omeka\Entity\User|null $user
 * @var \Contribute\Form\ContributeForm $form
 * @var \Contribute\Api\Representation\ContributionRepresentation|null $contribution
 * @var \Omeka\Api\Representation\AbstractResourceEntityRepresentation|null $resource
 * @var array $fields
 * @var \Omeka\Api\Representation\ResourceTemplateRepresentation $templateMedia A sub template for media may have no fields.
 * @var array $fieldsByMedia
 * @var array $fieldsMediaBase
 * @var string $action "add" or "edit" or "show"
 * @var string $mode "read" (for template select or for show readonly form before submit) or "write"
 * @var string $space "default" or "guest"
 *
 * @var string $submitLabel
 * @var string $cancelLabel
 * @var bool $isMainForm
 * @var bool $skipContributeCss
 *
 * When called recursively for sub-fields (media):
 * @var ?int $indexMedia
 * @var array $fieldsMedia
 *
 * @var \Laminas\View\Helper\Url $url
 * @var \Laminas\View\Helper\Partial $partial
 * @var \Laminas\View\Helper\EscapeHtml $escape
 * @var \Laminas\I18n\View\Helper\Translate $translate
 * @var \Laminas\View\Helper\EscapeHtmlAttr $escapeAttr
 * @var \Omeka\Api\Manager $apiManager
 * @var ?array $customVocabBaseTypes
 * @var array $valueResourceTypes
 * @var array $valueResourceQueries
 * @var callable $shortResourceTitle
 * @var string $baseUrlFiles
 * @var string $mode
 *
 * @var array $field
 * @var string $term
 * @var int $indexFieldInput
 * @var ?\Omeka\Api\Representation\ResourceTemplatePropertyRepresentation $templateProperty
 * @var ?\Omeka\Api\Representation\PropertyRepresentation $property
 * @var ?\Omeka\Api\Representation\ValueRepresentation $value
 * @var ?array $fieldContribution
 * @var ?int $indexContribution
 * @var bool $readonly
 * @var ?string $baseType
 *
 * @uses \CustomVocab\DataType\CustomVocab
 */

$original = $fieldContribution['original'];
$proposed = $fieldContribution['proposed'];
$isPrivate = $value ? !$value->isPublic() : (isset($templateProperty) ? $templateProperty->isPrivate() : false);
$isRequired = !empty($field['required']) && (($indexContribution ?? null) === 0);

$class = ['value', 'custom_vocab'];
if ($isPrivate):
    $class[] = 'private';
endif;
$language = isset($proposed['@value']) ? null : (isset($original['value']) ? $original['value']->lang() : null);

// Prepare select, that can be a list of keywords, a list of items from an item set or a list or uri/labels.
// Because the form element cannot be get directly, a quick replacement is done.
$customVocabId = (int) substr($fieldContribution['type'], 12);
$customVocabType = $baseType ?? $customVocabBaseTypes[$customVocabId] ?? 'literal';
$typeName = $customVocabType === 'literal' ? 'value' : $customVocabType;
if ($customVocabId) {
    $customVocab = $apiManager->read('custom_vocabs', ['id' => $customVocabId])->getContent();
    if ($customVocabType === 'resource') {
        $itemSet = $customVocab->itemSet();
        $itemSetClass = $itemSet ? $itemSet->resourceClass() : null;
        $plugins = $this->getHelperPluginManager();
        if ($itemSetClass && in_array($itemSetClass->term(), ['skos:Collection', 'skos:OrderedCollection']) && $plugins->has('thesaurus')) {
            $thesaurus = $plugins->get('thesaurus')($itemSet);
            $select = $thesaurus->asSelect(['output_type' => 'listTree', 'indent' => '– ', 'empty_option' => ''])
                ->setName('customvocab')
                ->setAttributes([
                    'data-value-key' => 'value_resource_id',
                    'class' => 'terms to-require',
                ]);
            $selectHtml = $this->formSelect($select);
        } else {
            $selectHtml = (new \CustomVocab\DataType\CustomVocab($customVocab))->form($this);
        }
    } else {
        $selectHtml = (new \CustomVocab\DataType\CustomVocab($customVocab))->form($this);
    }
} else {
    $customVocab = null;
    $selectHtml = '<select name="' . $fieldContribution['type'] . '"></select>';
}
$name = $isMainForm
    ? sprintf('%s[%s][@%s]', $term, $indexFieldInput, $typeName)
    : sprintf('media[%s][%s][%s][@%s]', $indexMedia, $term, $indexFieldInput, $typeName);

$replace = [
    'name="customvocab"' => 'name="' . $name . '"',
    'class="terms&#x20;to-require"' => 'class="form-control customvocab-input chosen-select"'
        . ' aria-labelledby="property-' . ($property ? $property->id() : '__PROPERTYID__') . '-label"'
        . ' data-placeholder="' . $escapeAttr($translate('Select a value…')) . '"'
        . ($isRequired ? ' required="required"' : '')
        . (empty($readonly) ? '' : ' readonly="readonly"'),
    '"value_resource_id"' => '"@resource"',
    '"@id"' => '"@uri"',
];

$val = $proposed['@' . $typeName] ?? $original['@' . $typeName] ?? '';

if (strlen((string) $val)) {
    $escapedVal = $escapeAttr($val);
    $replace['<option value="' . $escapedVal . '"'] = '<option value="' . $escapedVal . '" selected="selected"';
}
?>

<div class="<?= implode(' ', $class) ?>" lang="<?= $escape($language) ?>" data-basetype="<?= $customVocabType ?>">
    <?php if ($language): ?>
    <span class="language"><?= $language ?></span>
    <?php endif; ?>
    <?= str_replace(array_keys($replace), array_values($replace), $selectHtml) ?>
    <ul class="actions">
        <li><button type="button" class="o-icon-delete remove-value" title="<?= $escapeAttr($translate('Remove value')) ?>" href="#" aria-label="<?= $escapeAttr($translate('Remove value')) ?>"></button></li>
    </ul>
</div>
